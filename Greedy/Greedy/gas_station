//Optimized-->
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
    int sum = 0, tank = 0, start = 0;
    for (int i = 0; i < gas.length; i++) {
        int curr = gas[i] - cost[i];
        sum += curr;
        tank += curr;
        if (tank < 0) {
            start = i + 1;
            tank = 0;
        }
    }
    return sum >= 0 ? start : -1;
}
}
//Brut-Force-->
class Solution {
    public boolean solve(int[] gas, int[] cost, int start) {
        int n = gas.length;
        int tank = 0;
        for (int i = 0; i < n; i++) {
            int idx = (start + i) % n;
            tank += gas[idx] - cost[idx];
            if (tank < 0) return false;
        }
        return true;
    }

    public int canCompleteCircuit(int[] gas, int[] cost) {
        int n = gas.length;
        for (int i = 0; i < n; i++) {
            if (gas[i] >= cost[i] && solve(gas, cost, i)) {
                return i;
            }
        }
        return -1;
    }
}

